rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // This rule allows anyone on the internet to view, edit, and delete
    // all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // your app will lose access to your Firestore database
    match /users/{userID} {
      allow read;
      allow create:
        if isUserAuthenticated(userID)
      allow update:
        if isUserAuthenticated(userID)

      match /counters/{couterID} {
        allow read;
        match /shards/{index} {
          allow read;
        }
      }

      match /playLists/{playListID} {
        allow read;
        allow create:
          if isUserAuthenticated(userID)
        allow delete:
          if isUserAuthenticated(userID)
        allow update:
          if isUserAuthenticated(userID)
        
        match /playListQuiz/{quizID} {
          allow read;
          allow create:
            if isUserAuthenticated(userID)
          allow delete:
            if isUserAuthenticated(userID)
          allow update:
            if isUserAuthenticated(userID)
        }
      }

      match /subscribedUser/{subscribedUserID} {
        allow read;
        allow create:
          if isUserAuthenticated(subscribedUserID)
        allow update:
          if isUserAuthenticated(subscribedUserID)
        allow delete:
          if isUserAuthenticated(subscribedUserID)
      }
      match /subscribedChannel/{channelID} {
        allow read;
        allow create:
          if isUserAuthenticated(userID)
        allow update:
          if isUserAuthenticated(userID)
        allow delete:
          if isUserAuthenticated(userID)
      }

      match /quizzes/{quizID} {
        allow read;
        allow create:
          if isUserAuthenticated(userID)
        allow update:
          if isUserAuthenticated(userID)

        match /likedUsers/{likedUserID} {
          allow read;
          allow create:
            if isUserAuthenticated(likedUserID)  
          allow delete:
            if isUserAuthenticated(likedUserID)
          allow update:
            if isUserAuthenticated(likedUserID)
        }

        match /counters/{couterID} {
          allow read;
          match /shards/{index} {
            allow read;
          }
        }
      }

      match /likedQuizzes/{likedQuizID} {
        allow read;
        allow create:
          if isUserAuthenticated(userID)
        allow delete:
          if isUserAuthenticated(userID)
        allow update:
          if isUserAuthenticated(userID)
      }
    }
    match /{path=**}/quizzes/{quizID} {
      allow read;
    }
    match /{path=**}/playListQuiz/{quizID} {
      allow read;
    }

    match /{path=**}/playLists/{playListID} {
      allow read;
    }
    
    // function isAuthenticated() {
    //   return request.auth != null;
    // }

    function isUserAuthenticated(userID) {
      return request.auth.uid == userID;
    }
  }
}